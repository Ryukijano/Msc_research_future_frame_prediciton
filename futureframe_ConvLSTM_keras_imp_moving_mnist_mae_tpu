{"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"accelerator":"GPU","kaggle":{"accelerator":"tpu1vmV38","dataSources":[],"dockerImageVersionId":30628,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Introduction\n\nThe\n[Convolutional LSTM](https://papers.nips.cc/paper/2015/file/07563a3fe3bbe7e3ba84431ad9d055af-Paper.pdf)\narchitectures bring together time series processing and computer vision by\nintroducing a convolutional recurrent cell in a LSTM layer. In this example, we will explore the\nConvolutional LSTM model in an application to next-frame prediction, the process\nof predicting what video frames come next given a series of past frames.","metadata":{"id":"wZDPozjbLyWn"}},{"cell_type":"markdown","source":"Setup","metadata":{"id":"9kISI-uXL6kp"}},{"cell_type":"code","source":"!pip install keras-core","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install --upgrade keras","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install tensorflow[and-cuda]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow import keras\n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T18:13:39.529715Z","iopub.execute_input":"2024-05-17T18:13:39.530029Z","iopub.status.idle":"2024-05-17T18:13:42.727848Z","shell.execute_reply.started":"2024-05-17T18:13:39.529997Z","shell.execute_reply":"2024-05-17T18:13:42.726982Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"!pip install tensorboard\n!pip install --upgrade wandb","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from keras.callbacks import TensorBoard\nimport wandb\nfrom wandb.keras import WandbCallback","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from keras.callbacks import TensorBoard","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Set up TensorBoard callback\ntensorboard_callback = TensorBoard(log_dir='./logs', update_freq='epoch')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install --upgrade ipywidgets","metadata":{"execution":{"iopub.status.busy":"2024-05-17T18:13:42.824296Z","iopub.execute_input":"2024-05-17T18:13:42.824563Z","iopub.status.idle":"2024-05-17T18:13:47.631587Z","shell.execute_reply.started":"2024-05-17T18:13:42.824537Z","shell.execute_reply":"2024-05-17T18:13:47.630484Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Collecting ipywidgets\n  Downloading ipywidgets-8.1.2-py3-none-any.whl (139 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m139.4/139.4 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hCollecting widgetsnbextension~=4.0.10\n  Downloading widgetsnbextension-4.0.10-py3-none-any.whl (2.3 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m32.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (5.14.0)\nRequirement already satisfied: ipython>=6.1.0 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (8.18.1)\nCollecting jupyterlab-widgets~=3.0.10\n  Downloading jupyterlab_widgets-3.0.10-py3-none-any.whl (215 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m215.0/215.0 kB\u001b[0m \u001b[31m14.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hRequirement already satisfied: comm>=0.1.3 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (0.2.0)\nRequirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (1.2.0)\nRequirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (3.0.42)\nRequirement already satisfied: pygments>=2.4.0 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (2.17.2)\nRequirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (4.9.0)\nRequirement already satisfied: stack-data in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.6.3)\nRequirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.1.6)\nRequirement already satisfied: decorator in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (5.1.1)\nRequirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.19.1)\nRequirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/site-packages (from jedi>=0.16->ipython>=6.1.0->ipywidgets) (0.8.3)\nRequirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/site-packages (from pexpect>4.3->ipython>=6.1.0->ipywidgets) (0.7.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.10/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=6.1.0->ipywidgets) (0.2.12)\nRequirement already satisfied: pure-eval in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (0.2.2)\nRequirement already satisfied: executing>=1.2.0 in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (2.0.1)\nRequirement already satisfied: asttokens>=2.1.0 in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (2.4.1)\nRequirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/site-packages (from asttokens>=2.1.0->stack-data->ipython>=6.1.0->ipywidgets) (1.16.0)\nInstalling collected packages: widgetsnbextension, jupyterlab-widgets, ipywidgets\nSuccessfully installed ipywidgets-8.1.2 jupyterlab-widgets-3.0.10 widgetsnbextension-4.0.10\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # Tries to detect TPU\n    print(\"Running on TPU:\", tpu.master())\nexcept ValueError:\n    print(\"Could not connect to TPU\")\n    tpu = None\n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T18:13:47.633230Z","iopub.execute_input":"2024-05-17T18:13:47.633559Z","iopub.status.idle":"2024-05-17T18:13:47.638226Z","shell.execute_reply.started":"2024-05-17T18:13:47.633525Z","shell.execute_reply":"2024-05-17T18:13:47.637626Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Running on TPU: \n","output_type":"stream"}]},{"cell_type":"code","source":"if tpu:\n    try:\n        # Initialize the TPU system\n        print(\"Initializing TPU...\")\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"TPU initialized\")\n    except _:\n        print(\"Failed to initialize TPU\")\nelse:\n    print(\"Using default strategy (CPU/GPU)\")\n    strategy = tf.distribute.get_strategy()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T18:13:48.309968Z","iopub.execute_input":"2024-05-17T18:13:48.310674Z","iopub.status.idle":"2024-05-17T18:13:57.123924Z","shell.execute_reply.started":"2024-05-17T18:13:48.310635Z","shell.execute_reply":"2024-05-17T18:13:57.123077Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Initializing TPU...\nINFO:tensorflow:Deallocate tpu buffers before initializing tpu system.\nINFO:tensorflow:Initializing the TPU system: local\n","output_type":"stream"},{"name":"stderr","text":"2024-05-17 18:13:52.677847: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.677957: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.678024: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.678087: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.678155: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.678348: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.678430: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.678544: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.678617: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.678705: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.678904: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.678990: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.679058: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.679143: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.679228: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.679458: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.679545: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.679633: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.679713: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.679791: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.680006: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.680090: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.680165: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.680248: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.680331: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.680581: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.680668: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.680761: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.680837: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.680914: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.681142: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.681240: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.681331: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.681412: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.681509: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.681782: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.681862: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.681945: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.682044: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:13:52.682122: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:Finished initializing TPU system.\n","output_type":"stream"},{"name":"stderr","text":"WARNING:absl:`tf.distribute.experimental.TPUStrategy` is deprecated, please use the non-experimental symbol `tf.distribute.TPUStrategy` instead.\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:Found TPU system:\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:Found TPU system:\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Num TPU Cores: 8\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Num TPU Cores: 8\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Num TPU Workers: 1\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Num TPU Workers: 1\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"TPU initialized\n","output_type":"stream"}]},{"cell_type":"code","source":"# Define the strategy\nstrategy = tf.distribute.MirroredStrategy()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"if tpu:\n    try:\n        # Initialize the TPU system\n        print(\"Initializing TPU...\")\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"TPU initialized\")\n    except _:\n        print(\"Failed to initialize TPU\")\nelse:\n    print(\"Using default strategy (CPU/GPU)\")\n    strategy = tf.distribute.get_strategy()\n","metadata":{}},{"cell_type":"code","source":"!pip install imageio","metadata":{"execution":{"iopub.status.busy":"2024-05-17T18:13:57.125364Z","iopub.execute_input":"2024-05-17T18:13:57.125645Z","iopub.status.idle":"2024-05-17T18:14:00.930226Z","shell.execute_reply.started":"2024-05-17T18:13:57.125618Z","shell.execute_reply":"2024-05-17T18:14:00.929224Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Collecting imageio\n  Downloading imageio-2.34.1-py3-none-any.whl (313 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m313.5/313.5 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: pillow>=8.3.2 in /usr/local/lib/python3.10/site-packages (from imageio) (10.1.0)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/site-packages (from imageio) (1.26.2)\nInstalling collected packages: imageio\nSuccessfully installed imageio-2.34.1\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install ipywidgets","metadata":{"execution":{"iopub.status.busy":"2024-05-17T18:14:00.931406Z","iopub.execute_input":"2024-05-17T18:14:00.931687Z","iopub.status.idle":"2024-05-17T18:14:04.304037Z","shell.execute_reply.started":"2024-05-17T18:14:00.931658Z","shell.execute_reply":"2024-05-17T18:14:04.302824Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Requirement already satisfied: ipywidgets in /usr/local/lib/python3.10/site-packages (8.1.2)\nRequirement already satisfied: jupyterlab-widgets~=3.0.10 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (3.0.10)\nRequirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (5.14.0)\nRequirement already satisfied: widgetsnbextension~=4.0.10 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (4.0.10)\nRequirement already satisfied: comm>=0.1.3 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (0.2.0)\nRequirement already satisfied: ipython>=6.1.0 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (8.18.1)\nRequirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.1.6)\nRequirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.19.1)\nRequirement already satisfied: decorator in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (5.1.1)\nRequirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (1.2.0)\nRequirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (4.9.0)\nRequirement already satisfied: pygments>=2.4.0 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (2.17.2)\nRequirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (3.0.42)\nRequirement already satisfied: stack-data in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.6.3)\nRequirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/site-packages (from jedi>=0.16->ipython>=6.1.0->ipywidgets) (0.8.3)\nRequirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/site-packages (from pexpect>4.3->ipython>=6.1.0->ipywidgets) (0.7.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.10/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=6.1.0->ipywidgets) (0.2.12)\nRequirement already satisfied: pure-eval in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (0.2.2)\nRequirement already satisfied: executing>=1.2.0 in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (2.0.1)\nRequirement already satisfied: asttokens>=2.1.0 in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (2.4.1)\nRequirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/site-packages (from asttokens>=2.1.0->stack-data->ipython>=6.1.0->ipywidgets) (1.16.0)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install optree","metadata":{"execution":{"iopub.status.busy":"2024-05-17T18:14:04.306306Z","iopub.execute_input":"2024-05-17T18:14:04.306625Z","iopub.status.idle":"2024-05-17T18:14:08.009641Z","shell.execute_reply.started":"2024-05-17T18:14:04.306594Z","shell.execute_reply":"2024-05-17T18:14:08.008382Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Collecting optree\n  Downloading optree-0.11.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (311 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m311.2/311.2 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.10/site-packages (from optree) (4.9.0)\nInstalling collected packages: optree\nSuccessfully installed optree-0.11.0\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras import layers\n\nimport io\nimport imageio\nfrom IPython.display import Image, display\nfrom ipywidgets import widgets, Layout, HBox","metadata":{"id":"iyIrFKLalUjV","execution":{"iopub.status.busy":"2024-05-17T18:14:08.010991Z","iopub.execute_input":"2024-05-17T18:14:08.011300Z","iopub.status.idle":"2024-05-17T18:14:08.395962Z","shell.execute_reply.started":"2024-05-17T18:14:08.011269Z","shell.execute_reply":"2024-05-17T18:14:08.395047Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"## Dataset Construction\n\nFor this example, we will be using the\n[Moving MNIST](http://www.cs.toronto.edu/~nitish/unsupervised_video/)\ndataset.\n\nWe will download the dataset and then construct and\npreprocess training and validation sets.\n\nFor next-frame prediction, our model will be using a previous frame,\nwhich we'll call `f_n`, to predict a new frame, called `f_(n + 1)`.\nTo allow the model to create these predictions, we'll need to process\nthe data such that we have \"shifted\" inputs and outputs, where the\ninput data is frame `x_n`, being used to predict frame `y_(n + 1)`.","metadata":{"id":"UiisescrL5pt"}},{"cell_type":"code","source":"# Downloading the Moving MNIST dataset\nfpath = keras.utils.get_file(\n    \"moving_mnist.npy\",\n    \"http://www.cs.toronto.edu/~nitish/unsupervised_video/mnist_test_seq.npy\",\n)\ndataset = np.load(fpath)\n\n# swapping the axes representing the number of frames and number of data samples\ndataset = np.swapaxes(dataset, 0, 1)\n# we pick out 1000 of the 10000 total exmaples and use those. using all of it\n#dataset = dataset[:5000, ...]\n# adding a channel dimension since the images are grayscale.\ndataset = np.expand_dims(dataset, axis=-1)\n\n# splitting into train and validation sets using indexing to optimize memory.\nindexes = np.arange(dataset.shape[0])\nnp.random.shuffle(indexes)\ntrain_index = indexes[: int(0.9 * dataset.shape[0])]\nval_index = indexes[int(0.9 * dataset.shape[0]) :]\ntrain_dataset = dataset[train_index]\nval_dataset = dataset[val_index]\n\n# normalizing the data to the 0-1 range.\ntrain_dataset = train_dataset / 255\nval_dataset = val_dataset / 255\n\n# we define a helper function to shift the frames, where\n# 'x' is frame 0 to n - 1, and 'y' is frames 1 to n.\n'''\ndef create_shifted_frames(data):\n  x = data[:, 0 : data.shape[1] - 1, :, :]\n  y = data[:, 1 : data.shape[1], :, :]\n  return x,y\n'''\n#changed the function a bit\ndef create_shifted_frames(data):\n    # Correctly shift the frames to ensure `x` has one frame less than `y`\n    x = data[:, :-1, :, :, :]\n    y = data[:, 1:, :, :, :]\n    return x, y\n\n\n# apply the processing function to the datasets.\nx_train, y_train = create_shifted_frames(train_dataset)\nx_val, y_val = create_shifted_frames(val_dataset)\n\n#inspect the dataset.\nprint(\"Training Dataset Shapes: \" + str(x_train.shape) + \", \" + str(y_train.shape))\nprint(\"Validation Dataset Shapes: \" + str(x_val.shape) + \", \" + str(y_val.shape))\n\n","metadata":{"id":"RwVV9tb6mLWu","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8b99ffb1-29e2-4770-a8be-77f4a986a927","execution":{"iopub.status.busy":"2024-05-17T18:14:08.396945Z","iopub.execute_input":"2024-05-17T18:14:08.397180Z","iopub.status.idle":"2024-05-17T18:14:27.915876Z","shell.execute_reply.started":"2024-05-17T18:14:08.397156Z","shell.execute_reply":"2024-05-17T18:14:27.914975Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Downloading data from http://www.cs.toronto.edu/~nitish/unsupervised_video/mnist_test_seq.npy\n819200096/819200096 [==============================] - 17s 0us/step\nTraining Dataset Shapes: (9000, 19, 64, 64, 1), (9000, 19, 64, 64, 1)\nValidation Dataset Shapes: (1000, 19, 64, 64, 1), (1000, 19, 64, 64, 1)\n","output_type":"stream"}]},{"cell_type":"code","source":"import tensorflow as tf\n\ndef create_tf_dataset(x, y, batch_size=8, cache=False):\n    dataset = tf.data.Dataset.from_tensor_slices((x, y))\n    if cache:\n        dataset = dataset.cache()\n    dataset = dataset.shuffle(buffer_size=1024).batch(batch_size)\n    dataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\n    return dataset\n\n# Create TensorFlow datasets for training and validation\ntrain_tf_dataset = create_tf_dataset(x_train, y_train, batch_size=32, cache=True)\nval_tf_dataset = create_tf_dataset(x_val, y_val, batch_size=32, cache=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T18:14:27.916903Z","iopub.execute_input":"2024-05-17T18:14:27.917170Z","iopub.status.idle":"2024-05-17T18:14:42.496330Z","shell.execute_reply.started":"2024-05-17T18:14:27.917141Z","shell.execute_reply":"2024-05-17T18:14:42.495509Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"print(train_tf_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T18:14:42.497313Z","iopub.execute_input":"2024-05-17T18:14:42.497603Z","iopub.status.idle":"2024-05-17T18:14:42.501769Z","shell.execute_reply.started":"2024-05-17T18:14:42.497575Z","shell.execute_reply":"2024-05-17T18:14:42.501119Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"<_PrefetchDataset element_spec=(TensorSpec(shape=(None, 19, 64, 64, 1), dtype=tf.float64, name=None), TensorSpec(shape=(None, 19, 64, 64, 1), dtype=tf.float64, name=None))>\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Data Visualization\n\nOur data consists of sequences of frames, each of which\nare used to predict the upcoming frame. Let's take a look\nat some of these sequential frames.","metadata":{"id":"uX7kTs3ySN88"}},{"cell_type":"code","source":"# Contruct a figure on which we will visualize the images\nfig, axes = plt.subplots(4, 5, figsize=(10, 8))\n\n# Plot each of the sequential images for one random data example.\ndata_choice = np.random.choice(range(len(train_dataset)), size = 1)[0]\nfor idx, ax in enumerate(axes.flat):\n    ax.imshow(np.squeeze(train_dataset[data_choice][idx]), cmap=\"gray\")\n    ax.set_title(f\"Frame {idx + 1}\")\n    ax.axis(\"off\")\n\n# Print information and display the figure.\nprint(f\"Displaying frames for example {data_choice}.\")\nplt.show()\n","metadata":{"id":"Rs3LsDeUmT2Y","colab":{"base_uri":"https://localhost:8080/","height":692},"outputId":"b8a348f7-8ab8-435f-c8b4-d93555101e45","execution":{"iopub.status.busy":"2024-05-17T18:14:42.503416Z","iopub.execute_input":"2024-05-17T18:14:42.503670Z","iopub.status.idle":"2024-05-17T18:14:43.527267Z","shell.execute_reply.started":"2024-05-17T18:14:42.503647Z","shell.execute_reply":"2024-05-17T18:14:43.526485Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Displaying frames for example 609.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 20 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Model Construction\n\nTo build a Convolutional LSTM model, we will use the\n`ConvLSTM2D` layer, which will accept inputs of shape\n`(batch_size, num_frames, width, height, channels)`, and return\na prediction movie of the same shape.\n\n","metadata":{"id":"G7NQedSrUZca"}},{"cell_type":"markdown","source":"custom_loss that takes the true and predicted values for both frames and optical flow. The function calculates the frame loss using the Huber loss and the optical flow loss using the Huber loss as well. The total loss is the sum of the frame loss and the optical flow loss, weighted by a hyperparameter lambda","metadata":{}},{"cell_type":"code","source":"\nwith strategy.scope():\n    # Constructing the input layer with no definite frame size.\n    inp = tf.keras.layers.Input(shape=(None, *x_train.shape[2:]))\n\n    # Constructing 5 `ConvLSTM2D` layers with batch normalization,\n    # followed by a `Conv3D` layer for the spatiotemporal outputs.\n    x = tf.keras.layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(5, 5),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(inp)\n    x = tf.keras.layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(3, 3),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = tf.keras.layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(3, 3),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = tf.keras.layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(1, 1),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = tf.keras.layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(1, 1),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = tf.keras.layers.Conv3D(\n        filters=1, kernel_size=(3, 3, 3), activation=\"sigmoid\", padding=\"same\"\n    )(x)\n\n    # Next, we will build the complete model and compile it.\n    model = tf.keras.models.Model(inp, x)\n    model.compile(\n        loss=\"binary_crossentropy\",\n        optimizer=tf.keras.optimizers.Adam(),\n    )\n    \n\n#making a vae implementation","metadata":{"id":"FIU6g8dfsj5x","execution":{"iopub.status.busy":"2024-05-17T18:14:43.528302Z","iopub.execute_input":"2024-05-17T18:14:43.528603Z","iopub.status.idle":"2024-05-17T18:14:47.420321Z","shell.execute_reply.started":"2024-05-17T18:14:43.528574Z","shell.execute_reply":"2024-05-17T18:14:47.419405Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stderr","text":"2024-05-17 18:14:43.706622: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:14:43.706744: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, Model, callbacks\nfrom tensorflow.keras.optimizers import Adam\n\n# Custom sampling layer for VAE\nclass Sampling(layers.Layer):\n    def call(self, inputs):\n        z_mean, z_log_var = inputs\n        batch = tf.shape(z_mean)[0]\n        dim = tf.shape(z_mean)[1]\n        epsilon = tf.keras.backend.random_normal(shape=(batch, dim))\n        return z_mean + tf.exp(0.5 * z_log_var) * epsilon\n\n# Define the VAE encoder\ndef build_encoder(input_shape, latent_dim):\n    encoder_inputs = layers.Input(shape=(None, *input_shape))\n    x = layers.ConvLSTM2D(\n        filters=32,\n        kernel_size=(3, 3),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(encoder_inputs)\n    x = layers.BatchNormalization()(x)\n    x = layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(3, 3),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(3, 3),\n        padding=\"same\",\n        return_sequences=False,\n        activation=\"relu\",\n    )(x)\n    x = layers.Flatten()(x)\n    z_mean = layers.Dense(latent_dim, name=\"z_mean\")(x)\n    z_log_var = layers.Dense(latent_dim, name=\"z_log_var\")(x)\n    z = Sampling()([z_mean, z_log_var])\n    encoder = Model(encoder_inputs, [z_mean, z_log_var, z], name=\"encoder\")\n    return encoder\n\n# Define the VAE decoder\ndef build_decoder(latent_dim, output_shape):\n    latent_inputs = layers.Input(shape=(latent_dim,))\n    x = layers.Dense(64 * 8 * 8 * 20, activation=\"relu\")(latent_inputs)\n    x = layers.Reshape((20, 8, 8, 64))(x)\n    x = layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(3, 3),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(3, 3),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Conv3D(\n        filters=1, kernel_size=(3, 3, 3), activation=\"sigmoid\", padding=\"same\"\n    )(x)\n    x = layers.TimeDistributed(layers.UpSampling2D(size=(8, 8)))(x)\n    decoder = Model(latent_inputs, x, name=\"decoder\")\n    return decoder\n\n# Define the VAE model\nclass VAE(Model):\n    def __init__(self, encoder, decoder, **kwargs):\n        super(VAE, self).__init__(**kwargs)\n        self.encoder = encoder\n        self.decoder = decoder\n\n    def train_step(self, data):\n        x, y = data\n        with tf.GradientTape() as tape:\n            z_mean, z_log_var, z = self.encoder(x)\n            reconstruction = self.decoder(z)\n            reconstruction_loss = tf.reduce_mean(\n                tf.keras.losses.binary_crossentropy(y, reconstruction)\n            )\n            reconstruction_loss *= 64 * 64 * 20\n            kl_loss = 1 + z_log_var - tf.square(z_mean) - tf.exp(z_log_var)\n            kl_loss = tf.reduce_mean(kl_loss)\n            kl_loss *= -0.5\n            total_loss = reconstruction_loss + kl_loss\n        grads = tape.gradient(total_loss, self.trainable_weights)\n        self.optimizer.apply_gradients(zip(grads, self.trainable_weights))\n        return {\n            \"loss\": total_loss,\n            \"reconstruction_loss\": reconstruction_loss,\n            \"kl_loss\": kl_loss,\n        }\n\n\n# Parameters\ninput_shape = x_train.shape[2:]\nlatent_dim = 2\noutput_shape = input_shape\n\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Model Training\n\nWith our model and data constructed, we can now train the model.","metadata":{"id":"FUNqsvz8Y-Lp"}},{"cell_type":"code","source":"# Build encoder and decoder\nwith strategy.scope():\n    encoder = build_encoder(input_shape, latent_dim)\n    decoder = build_decoder(latent_dim, output_shape)\n\n    # Build and compile VAE model\n    vae = VAE(encoder, decoder)\n    vae.compile(optimizer=Adam(learning_rate=0.001))\n\n    # Define callbacks\n    early_stopping = callbacks.EarlyStopping(monitor=\"val_loss\", patience=10)\n    reduce_lr = callbacks.ReduceLROnPlateau(monitor=\"val_loss\", patience=5)\n    tensorboard_callback = callbacks.TensorBoard(log_dir='./logs')\n\n    # Training hyperparameters\n    epochs = 100\n    batch_size = 128  # Start with 64, can be increased to 128, 256, etc.\n\n    # Fitting the model to the training data\n    vae.fit(\n        train_tf_dataset,\n        epochs=epochs,\n        validation_data=val_tf_dataset,\n        callbacks=[early_stopping, reduce_lr, tensorboard_callback],\n    )\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install PyDrive\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install kaggle","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from google.colab import drive\ndrive.mount('/content/drive')\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!cp /kaggle/working/checkpoints/convlstm01.keras /kaggle/working/my_model.keras","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, Model, callbacks\n\n\nwith strategy.scope():\n\n    # Define callbacks\n    early_stopping = callbacks.EarlyStopping(monitor=\"val_loss\", patience=20)\n    reduce_lr = callbacks.ReduceLROnPlateau(monitor=\"val_loss\", patience=10)\n    tensorboard_callback = callbacks.TensorBoard(log_dir='./logs')\n    checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n        filepath='/kaggle/working/checkpoints/convlstm{epoch:02d}.keras', \n        save_weights_only=False, \n        save_best_only=False,  \n        save_freq=15 \n    )\n\n    # Training hyperparameters\n    epochs = 30\n    batch_size = 32  #best fit for the tpuv3\n    # Train the model using model.fit\n    model.fit(\n        train_tf_dataset,\n        epochs=epochs,\n        batch_size=batch_size, \n        validation_data=val_tf_dataset,\n        callbacks=[early_stopping, reduce_lr, tensorboard_callback, checkpoint_callback],\n    )","metadata":{"execution":{"iopub.status.busy":"2024-05-17T18:14:47.421314Z","iopub.execute_input":"2024-05-17T18:14:47.421600Z","iopub.status.idle":"2024-05-17T21:50:26.155920Z","shell.execute_reply.started":"2024-05-17T18:14:47.421573Z","shell.execute_reply":"2024-05-17T21:50:26.154604Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stderr","text":"2024-05-17 18:15:06.897660: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:06.920340: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:06.938901: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:06.958117: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:06.976558: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:06.994150: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:07.012621: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/30\n","output_type":"stream"},{"name":"stderr","text":"2024-05-17 18:15:25.559123: E tensorflow/core/grappler/optimizers/meta_optimizer.cc:961] model_pruner failed: INVALID_ARGUMENT: Graph does not contain terminal node Adam/AssignAddVariableOp.\n2024-05-17 18:15:26.437425: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:26.437614: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:26.441398: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:26.441979: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:26.444801: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:26.444900: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:15:26.452214: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:16:18.083516: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:16:18.083696: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:16:18.083769: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:16:18.083862: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:16:18.083952: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:16:18.084034: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:16:18.084156: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:16:18.084274: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":"  8/282 [..............................] - ETA: 6:31 - loss: 0.6588","output_type":"stream"},{"name":"stderr","text":"2024-05-17 18:16:29.771755: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:16:29.771898: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":" 12/282 [>.............................] - ETA: 6:25 - loss: 0.8640","output_type":"stream"},{"name":"stderr","text":"2024-05-17 18:16:35.467649: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":" 20/282 [=>............................] - ETA: 6:15 - loss: 76.0867","output_type":"stream"},{"name":"stderr","text":"2024-05-17 18:16:47.027949: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-05-17 18:16:47.028375: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":" 24/282 [=>............................] - ETA: 6:09 - loss: 1915.2244","output_type":"stream"},{"name":"stderr","text":"2024-05-17 18:16:52.723130: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":" 40/282 [===>..........................] - ETA: 5:46 - loss: 1034126.3125","output_type":"stream"},{"name":"stderr","text":"2024-05-17 18:17:15.561518: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":"124/282 [============>.................] - ETA: 3:46 - loss: 350493.3438","output_type":"stream"},{"name":"stderr","text":"2024-05-17 18:19:15.885325: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":"282/282 [==============================] - ETA: 0s - loss: 154816.5312","output_type":"stream"},{"name":"stderr","text":"2024-05-17 18:23:49.642335: E tensorflow/core/grappler/optimizers/meta_optimizer.cc:961] model_pruner failed: INVALID_ARGUMENT: Graph does not contain terminal node AssignAddVariableOp.\n","output_type":"stream"},{"name":"stdout","text":"282/282 [==============================] - 591s 2s/step - loss: 154816.5312 - val_loss: 456.2682 - lr: 0.0010\nEpoch 2/30\n282/282 [==============================] - 414s 1s/step - loss: 228.9698 - val_loss: 0.5515 - lr: 0.0010\nEpoch 3/30\n282/282 [==============================] - 414s 1s/step - loss: 56.3829 - val_loss: 2.3341 - lr: 0.0010\nEpoch 4/30\n282/282 [==============================] - 414s 1s/step - loss: 1.0422 - val_loss: 0.5736 - lr: 0.0010\nEpoch 5/30\n282/282 [==============================] - 414s 1s/step - loss: 0.4831 - val_loss: 0.3922 - lr: 0.0010\nEpoch 6/30\n282/282 [==============================] - 414s 1s/step - loss: 0.3723 - val_loss: 0.3396 - lr: 0.0010\nEpoch 7/30\n282/282 [==============================] - 414s 1s/step - loss: 0.2092 - val_loss: 0.1788 - lr: 0.0010\nEpoch 8/30\n282/282 [==============================] - 414s 1s/step - loss: 0.1683 - val_loss: 0.1657 - lr: 0.0010\nEpoch 9/30\n282/282 [==============================] - 414s 1s/step - loss: 9.9034 - val_loss: 0.2087 - lr: 0.0010\nEpoch 10/30\n282/282 [==============================] - 414s 1s/step - loss: 0.2021 - val_loss: 0.1821 - lr: 0.0010\nEpoch 11/30\n282/282 [==============================] - 414s 1s/step - loss: 0.2699 - val_loss: 0.1879 - lr: 0.0010\nEpoch 12/30\n282/282 [==============================] - 414s 1s/step - loss: 0.1873 - val_loss: 0.1736 - lr: 0.0010\nEpoch 13/30\n282/282 [==============================] - 414s 1s/step - loss: 0.2114 - val_loss: 0.3211 - lr: 0.0010\nEpoch 14/30\n282/282 [==============================] - 414s 1s/step - loss: 0.1761 - val_loss: 0.1605 - lr: 0.0010\nEpoch 15/30\n282/282 [==============================] - 414s 1s/step - loss: 0.1479 - val_loss: 0.1417 - lr: 0.0010\nEpoch 16/30\n282/282 [==============================] - 415s 1s/step - loss: 0.1410 - val_loss: 0.1383 - lr: 0.0010\nEpoch 17/30\n282/282 [==============================] - 414s 1s/step - loss: 0.1377 - val_loss: 0.1352 - lr: 0.0010\nEpoch 18/30\n282/282 [==============================] - 415s 1s/step - loss: 0.1370 - val_loss: 0.1432 - lr: 0.0010\nEpoch 19/30\n282/282 [==============================] - 416s 1s/step - loss: 0.1426 - val_loss: 0.1386 - lr: 0.0010\nEpoch 20/30\n282/282 [==============================] - 416s 1s/step - loss: 0.1362 - val_loss: 0.1311 - lr: 0.0010\nEpoch 21/30\n282/282 [==============================] - 414s 1s/step - loss: 0.1306 - val_loss: 0.1292 - lr: 0.0010\nEpoch 22/30\n282/282 [==============================] - 415s 1s/step - loss: 0.1278 - val_loss: 0.1267 - lr: 0.0010\nEpoch 23/30\n282/282 [==============================] - 415s 1s/step - loss: 0.1290 - val_loss: 0.1278 - lr: 0.0010\nEpoch 24/30\n282/282 [==============================] - 415s 1s/step - loss: 0.1262 - val_loss: 0.1237 - lr: 0.0010\nEpoch 25/30\n282/282 [==============================] - 416s 1s/step - loss: 0.1237 - val_loss: 0.1219 - lr: 0.0010\nEpoch 26/30\n282/282 [==============================] - 415s 1s/step - loss: 0.1220 - val_loss: 0.1216 - lr: 0.0010\nEpoch 27/30\n282/282 [==============================] - 415s 1s/step - loss: 0.1205 - val_loss: 0.1891 - lr: 0.0010\nEpoch 28/30\n282/282 [==============================] - 415s 1s/step - loss: 0.2047 - val_loss: 0.1378 - lr: 0.0010\nEpoch 29/30\n282/282 [==============================] - 415s 1s/step - loss: 0.1299 - val_loss: 0.1238 - lr: 0.0010\nEpoch 30/30\n282/282 [==============================] - 416s 1s/step - loss: 354406.1875 - val_loss: 0.2122 - lr: 0.0010\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\n\n# Define the path where you want to save the model\nmodel_save_path = '/content/drive/My Drive/convlstm_best.pth'\n\n# Save the model\ntorch.save(model.state_dict(), model_save_path)\n\nprint(f\"Model saved to {model_save_path}\")\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, Model, callbacks\nfrom tensorflow.keras.optimizers import Adam\n\n# ... (Your existing code for encoder, decoder, VAE, etc.) ... \n\nwith strategy.scope():\n    # Set up mixed precision\n\n    # Define callbacks\n    early_stopping = callbacks.EarlyStopping(monitor=\"val_loss\", patience=10)\n    reduce_lr = callbacks.ReduceLROnPlateau(monitor=\"val_loss\", patience=5)\n    tensorboard_callback = callbacks.TensorBoard(log_dir='./logs')\n\n    # Model Checkpoint Callback\n    checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n        filepath='./checkpoints/vae_model{epoch:02d}.keras', \n        save_weights_only=False,  # Save the entire model\n        save_best_only=False,  # Save all models, not just the best\n        save_freq=10  # Save every 10 epochs\n    )\n\n    # Training hyperparameters\n    epochs = 100\n    batch_size = 64\n\n    # Fitting the model to the training data.\n    vae.fit(\n        train_tf_dataset,\n        batch_size=batch_size,\n        epochs=epochs,\n        validation_data=val_tf_dataset,\n        callbacks=[early_stopping, reduce_lr, tensorboard_callback, checkpoint_callback],\n    )","metadata":{"id":"CJr4T9l3O1wg","colab":{"base_uri":"https://localhost:8080/"},"outputId":"380bd180-30da-4080-a215-646bc601f7f4","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%load_ext tensorboard\n%tensorboard --logdir ./logs","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Frame Prediction Visualizations\n\nWith our model now constructed and trained, we can generate\nsome example frame predictions based on a new video.\n\nWe'll pick a random example from the validation set and\nthen choose the first ten frames from them. From there, we can\nallow the model to predict 10 new frames, which we can compare\nto the ground truth frame predictions.","metadata":{"id":"A0JJPwxQZ4_m"}},{"cell_type":"code","source":"import os","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_save_path = os.path.join('/kaggle/working', 'trained_convlstm_model.keras')\nmodel.save(model_save_path)\nprint(f\"Model saved to: {model_save_path}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Select a random example from the validation dataset.\nexample = val_dataset[np.random.choice(range(len(val_dataset)), size=1)[0]]\n\n# Pick the first/last ten frames from the example.\nframes = example[:10, ...]\noriginal_frames = example[10:, ...]\n\n# Predict a new set of 10 frames.\nfor _ in range(10):\n    # Extract the model's prediction and post-process it.\n    new_prediction = model.predict(np.expand_dims(frames, axis=0))\n    new_prediction = np.squeeze(new_prediction, axis=0)\n    predicted_frame = np.expand_dims(new_prediction[-1, ...], axis=0)\n\n    # Extend the set of prediction frames.\n    frames = np.concatenate((frames, predicted_frame), axis=0)\n\n# Construct a figure for the original and new frames.\nfig, axes = plt.subplots(2, 10, figsize=(20, 4))\n\n# Plot the original frames.\nfor idx, ax in enumerate(axes[0]):\n    ax.imshow(np.squeeze(original_frames[idx]), cmap=\"gray\")\n    ax.set_title(f\"Frame {idx + 11}\")\n    ax.axis(\"off\")\n\n# Plot the new frames.\nnew_frames = frames[10:, ...]\nfor idx, ax in enumerate(axes[1]):\n    ax.imshow(np.squeeze(new_frames[idx]), cmap=\"gray\")\n    ax.set_title(f\"Frame {idx + 11}\")\n    ax.axis(\"off\")\n\n# Display the figure.\nplt.show()\n","metadata":{"id":"l_wCQqVMO3jf","execution":{"iopub.status.busy":"2024-05-17T21:50:26.159279Z","iopub.execute_input":"2024-05-17T21:50:26.159980Z","iopub.status.idle":"2024-05-17T21:53:44.598084Z","shell.execute_reply.started":"2024-05-17T21:50:26.159941Z","shell.execute_reply":"2024-05-17T21:53:44.597105Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stderr","text":"2024-05-17 21:50:27.719718: E tensorflow/core/grappler/optimizers/meta_optimizer.cc:961] model_pruner failed: INVALID_ARGUMENT: Graph does not contain terminal node AssignAddVariableOp.\n","output_type":"stream"},{"name":"stdout","text":"1/1 [==============================] - 31s 31s/step\n1/1 [==============================] - 20s 20s/step\n1/1 [==============================] - 15s 15s/step\n1/1 [==============================] - 16s 16s/step\n1/1 [==============================] - 16s 16s/step\n1/1 [==============================] - 19s 19s/step\n1/1 [==============================] - 18s 18s/step\n1/1 [==============================] - 18s 18s/step\n1/1 [==============================] - 23s 23s/step\n1/1 [==============================] - 19s 19s/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x400 with 20 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Predicted Videos\n\nFinally, we'll pick a few examples from the validation set\nand construct some GIFs with them to see the model's\npredicted videos.\n\nWe can use the trained model hosted on [Hugging Face Hub](https://huggingface.co/keras-io/conv-lstm)\nand try the demo on [Hugging Face Spaces](https://huggingface.co/spaces/keras-io/conv-lstm)","metadata":{"id":"0aFxUhK7gZHv"}},{"cell_type":"code","source":"# Selecting a few random examples from the dataset.\nexamples = val_dataset[np.random.choice(range(len(val_dataset)), size=5)]\n\n# Iterate over the examples and predict the frames.\npredicted_videos = []\nfor example in examples:\n  # Pick the first/last ten frames from the example.\n  frames = example[10:, ...]\n  original_frames = example[10:, ...]\n  new_predictions = np.zeros(shape=(10, *frames[0].shape))\n\n  # Predict a new set of 10 frames.\n  for i in range(10):\n      # Extract the model's prediction and post-process it.\n      frames = example[: 10 + i + 1, ...]\n      new_prediction = model.predict(np.expand_dims(frames, axis=0))\n      new_prediction = np.squeeze(new_prediction, axis=0)\n      predicted_frame = np.expand_dims(new_prediction[-1, ...], axis=0)\n\n      # Extending the set of prediction frames.\n      new_predictions[i] = predicted_frame\n\n  # Creating and saving GIFs for each of the ground truth/prediction images.\n  for frame_set in [original_frames, new_predictions]:\n      #Construct a GIF from the selected video frames.\n      current_frames = np.squeeze(frame_set)\n      current_frames = current_frames[..., np.newaxis] * np.ones(3)\n      current_frames = (current_frames * 255).astype(np.uint8)\n      current_frames = list(current_frames)\n\n      # Construct a GIF from the frames.\n      with io.BytesIO() as gif:\n          imageio.mimsave(gif, current_frames, \"GIF\", duration=200)\n          predicted_videos.append(gif.getvalue())\n\n# Display the videos.\nprint(\" Truth\\tPrediction\")\nfor i in range(0, len(predicted_videos), 2):\n  # Construct and display an 'HBox'  with the ground truth and prediction.\n  box = HBox(\n      [\n          widgets.Image(value=predicted_videos[i]),\n          widgets.Image(value=predicted_videos[i + 1]),\n      ]\n  )\n  display(box)\n\n","metadata":{"id":"DZTgO3koO8JA","execution":{"iopub.status.busy":"2024-05-17T21:53:44.623818Z","iopub.execute_input":"2024-05-17T21:53:44.624042Z","iopub.status.idle":"2024-05-17T21:54:35.731176Z","shell.execute_reply.started":"2024-05-17T21:53:44.624016Z","shell.execute_reply":"2024-05-17T21:54:35.729885Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"1/1 [==============================] - 0s 463ms/step\n1/1 [==============================] - 1s 534ms/step\n1/1 [==============================] - 1s 504ms/step\n1/1 [==============================] - 0s 485ms/step\n1/1 [==============================] - 1s 503ms/step\n1/1 [==============================] - 1s 505ms/step\n1/1 [==============================] - 1s 513ms/step\n1/1 [==============================] - 1s 508ms/step\n1/1 [==============================] - 1s 530ms/step\n1/1 [==============================] - 21s 21s/step\n1/1 [==============================] - 0s 488ms/step\n1/1 [==============================] - 0s 489ms/step\n1/1 [==============================] - 0s 470ms/step\n1/1 [==============================] - 0s 476ms/step\n1/1 [==============================] - 0s 489ms/step\n1/1 [==============================] - 1s 533ms/step\n1/1 [==============================] - 1s 529ms/step\n1/1 [==============================] - 1s 1s/step\n1/1 [==============================] - 1s 541ms/step\n1/1 [==============================] - 1s 635ms/step\n1/1 [==============================] - 0s 495ms/step\n1/1 [==============================] - 0s 478ms/step\n1/1 [==============================] - 0s 469ms/step\n1/1 [==============================] - 0s 494ms/step\n1/1 [==============================] - 1s 530ms/step\n1/1 [==============================] - 1s 525ms/step\n1/1 [==============================] - 1s 509ms/step\n1/1 [==============================] - 1s 508ms/step\n1/1 [==============================] - 1s 540ms/step\n1/1 [==============================] - 1s 540ms/step\n1/1 [==============================] - 0s 486ms/step\n1/1 [==============================] - 0s 478ms/step\n1/1 [==============================] - 0s 459ms/step\n1/1 [==============================] - 0s 470ms/step\n1/1 [==============================] - 1s 506ms/step\n1/1 [==============================] - 1s 539ms/step\n1/1 [==============================] - 1s 515ms/step\n1/1 [==============================] - 1s 565ms/step\n1/1 [==============================] - 1s 534ms/step\n1/1 [==============================] - 1s 548ms/step\n1/1 [==============================] - 0s 496ms/step\n1/1 [==============================] - 1s 504ms/step\n1/1 [==============================] - 0s 496ms/step\n1/1 [==============================] - 0s 477ms/step\n1/1 [==============================] - 0s 482ms/step\n1/1 [==============================] - 0s 487ms/step\n1/1 [==============================] - 1s 509ms/step\n1/1 [==============================] - 1s 517ms/step\n1/1 [==============================] - 1s 1s/step\n1/1 [==============================] - 1s 584ms/step\n Truth\tPrediction\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"HBox(children=(Image(value=b'GIF89a@\\x00@\\x00\\x86\\x00\\x00\\xff\\xff\\xff\\xfe\\xfe\\xfe\\xfd\\xfd\\xfd\\xfc\\xfc\\xfc\\xfb\\…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d77e17f1aaf24f77b8fba5ab6141dabc"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"HBox(children=(Image(value=b'GIF89a@\\x00@\\x00\\x86\\x00\\x00\\xff\\xff\\xff\\xfe\\xfe\\xfe\\xfd\\xfd\\xfd\\xfc\\xfc\\xfc\\xfa\\…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f4d801e241f54612aba0c1dbfe563e95"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"HBox(children=(Image(value=b'GIF89a@\\x00@\\x00\\x86\\x00\\x00\\xff\\xff\\xff\\xfe\\xfe\\xfe\\xfd\\xfd\\xfd\\xfc\\xfc\\xfc\\xfb\\…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2342b9e813b3484cb4c1e0f1d31e3e0c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"HBox(children=(Image(value=b'GIF89a@\\x00@\\x00\\x87\\x00\\x00\\xff\\xff\\xff\\xfe\\xfe\\xfe\\xfd\\xfd\\xfd\\xfc\\xfc\\xfc\\xfa\\…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6659fd374c4a486ab93aa2f16bfa0ca8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"HBox(children=(Image(value=b'GIF89a@\\x00@\\x00\\x86\\x00\\x00\\xff\\xff\\xff\\xfe\\xfe\\xfe\\xfd\\xfd\\xfd\\xfb\\xfb\\xfb\\xfa\\…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bdd2702a137143fe9585a1a0c2b28653"}},"metadata":{}}]},{"cell_type":"code","source":"model.save('/kaggle/working/')\n","metadata":{"id":"zpMi64tD43Dz","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"JAX implementation\n","metadata":{}},{"cell_type":"code","source":"!pip install stax","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install flax","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import flax\nimport flax.nn as nn\nimport jax\nimport jax.numpy as jnp\nfrom flax.core import FrozenDict\n\n# Load the Moving MNIST dataset\ndataset = np.load(\"moving_mnist.npy\")\ndataset = np.swapaxes(dataset, 0, 1)\ndataset = dataset[:1000, ...]\ndataset = np.expand_dims(dataset, axis=-1)\n\n# Split into training and validation sets\nindexes = np.arange(dataset.shape[0])\nnp.random.shuffle(indexes)\ntrain_index = indexes[: int(0.9 * dataset.shape[0])]\nval_index = indexes[int(0.9 * dataset.shape[0]) :]\ntrain_dataset = dataset[train_index]\nval_dataset = dataset[val_index]\n\n# Normalize the data to the 0-1 range\ntrain_dataset = train_dataset / 255\nval_dataset = val_dataset / 255\n\n# Define the helper function to shift the frames\ndef create_shifted_frames(data):\n    x = data[:, 0 : data.shape[1] - 1, :, :]\n    y = data[:, 1 : data.shape[1], :, :]\n    return x, y\n\n# Apply the processing function to the datasets\nx_train, y_train = create_shifted_frames(train_dataset)\nx_val, y_val = create_shifted_frames(val_dataset)\n\n# Define the Convolutional LSTM model\nclass ConvLSTM(nn.Module):\n    @nn.compact\n    def __call__(self, x):\n        x = nn.ConvLSTM(num_features=64, kernel_shape=(5, 5), stride=1, padding=\"SAME\")(x)\n        x = nn.ConvLSTM(num_features=64, kernel_shape=(3, 3), stride=1, padding=\"SAME\")(x)\n        x = nn.ConvLSTM(num_features=64, kernel_shape=(3, 3), stride=1, padding=\"SAME\")(x)\n        x = nn.ConvLSTM(num_features=64, kernel_shape=(1, 1), stride=1, padding=\"SAME\")(x)\n        x = nn.ConvLSTM(num_features=64, kernel_shape=(1, 1), stride=1, padding=\"SAME\")(x)\n        x = nn.Conv(num_features=1, kernel_shape=(3, 3, 3), stride=1, padding=\"SAME\")(x)\n        return x\n\n# Initialize the model parameters\nmodel = ConvLSTM()\nparams = model.init(jax.random.PRNGKey(0), x_train)\n\n# Define the loss function and optimizer\ndef loss_fn(params, x, y):\n    y_pred = model.apply(params, x)\n    return jnp.mean((y_pred - y) ** 2)\n\nopt_init, opt_update, get_params = flax.optimizers.adam(1e-4)\nopt_state = opt_init(params)\n\n# Train the model\nfor epoch in range(1000):\n    for x_batch, y_batch in zip(x_train, y_train):\n        grads = jax.grad(loss_fn)(get_params(opt_state), x_batch, y_batch)\n        opt_state = opt_update(epoch, grads, opt_state)\n    print(f\"Epoch {epoch}, Loss: {loss_fn(get_params(opt_state), x_batch, y_batch)}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}