{"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"accelerator":"GPU","kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":5057593,"sourceType":"datasetVersion","datasetId":2936600}],"dockerImageVersionId":30628,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Introduction\n\nThe\n[Convolutional LSTM](https://papers.nips.cc/paper/2015/file/07563a3fe3bbe7e3ba84431ad9d055af-Paper.pdf)\narchitectures bring together time series processing and computer vision by\nintroducing a convolutional recurrent cell in a LSTM layer. In this example, we will explore the\nConvolutional LSTM model in an application to next-frame prediction, the process\nof predicting what video frames come next given a series of past frames.","metadata":{"id":"wZDPozjbLyWn"}},{"cell_type":"markdown","source":"Setup","metadata":{"id":"9kISI-uXL6kp"}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow import keras\n","metadata":{"execution":{"iopub.status.busy":"2024-04-20T13:26:59.802673Z","iopub.execute_input":"2024-04-20T13:26:59.802925Z","iopub.status.idle":"2024-04-20T13:27:03.214756Z","shell.execute_reply.started":"2024-04-20T13:26:59.802897Z","shell.execute_reply":"2024-04-20T13:27:03.213923Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"!pip install tensorboard\n!pip install --upgrade wandb","metadata":{"execution":{"iopub.status.busy":"2024-04-20T13:27:03.216205Z","iopub.execute_input":"2024-04-20T13:27:03.216648Z","iopub.status.idle":"2024-04-20T13:27:10.124984Z","shell.execute_reply.started":"2024-04-20T13:27:03.216618Z","shell.execute_reply":"2024-04-20T13:27:10.123887Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Requirement already satisfied: tensorboard in /usr/local/lib/python3.10/site-packages (2.14.1)\nRequirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/site-packages (from tensorboard) (2.31.0)\nRequirement already satisfied: numpy>=1.12.0 in /usr/local/lib/python3.10/site-packages (from tensorboard) (1.26.2)\nRequirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/site-packages (from tensorboard) (2.25.2)\nRequirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.10/site-packages (from tensorboard) (1.0.0)\nRequirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/site-packages (from tensorboard) (0.7.2)\nRequirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/site-packages (from tensorboard) (3.5.1)\nRequirement already satisfied: grpcio>=1.48.2 in /usr/local/lib/python3.10/site-packages (from tensorboard) (1.60.0)\nRequirement already satisfied: protobuf>=3.19.6 in /usr/local/lib/python3.10/site-packages (from tensorboard) (3.20.3)\nRequirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.10/site-packages (from tensorboard) (65.5.1)\nRequirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/site-packages (from tensorboard) (3.0.1)\nRequirement already satisfied: absl-py>=0.4 in /usr/local/lib/python3.10/site-packages (from tensorboard) (1.4.0)\nRequirement already satisfied: six>1.9 in /usr/local/lib/python3.10/site-packages (from tensorboard) (1.16.0)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard) (0.3.0)\nRequirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard) (4.9)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard) (5.3.2)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/site-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard) (1.3.1)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard) (2023.11.17)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard) (2.1.0)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard) (3.6)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard) (3.3.2)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard) (2.1.3)\nRequirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard) (0.5.1)\nRequirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard) (3.2.2)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\nRequirement already satisfied: wandb in /usr/local/lib/python3.10/site-packages (0.16.6)\nRequirement already satisfied: sentry-sdk>=1.0.0 in /usr/local/lib/python3.10/site-packages (from wandb) (1.45.0)\nRequirement already satisfied: appdirs>=1.4.3 in /usr/local/lib/python3.10/site-packages (from wandb) (1.4.4)\nRequirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.10/site-packages (from wandb) (5.9.6)\nRequirement already satisfied: protobuf!=4.21.0,<5,>=3.19.0 in /usr/local/lib/python3.10/site-packages (from wandb) (3.20.3)\nRequirement already satisfied: Click!=8.0.0,>=7.1 in /usr/local/lib/python3.10/site-packages (from wandb) (8.1.7)\nRequirement already satisfied: docker-pycreds>=0.4.0 in /usr/local/lib/python3.10/site-packages (from wandb) (0.4.0)\nRequirement already satisfied: setproctitle in /usr/local/lib/python3.10/site-packages (from wandb) (1.3.3)\nRequirement already satisfied: GitPython!=3.1.29,>=1.0.0 in /usr/local/lib/python3.10/site-packages (from wandb) (3.1.43)\nRequirement already satisfied: setuptools in /usr/local/lib/python3.10/site-packages (from wandb) (65.5.1)\nRequirement already satisfied: PyYAML in /usr/local/lib/python3.10/site-packages (from wandb) (6.0.1)\nRequirement already satisfied: requests<3,>=2.0.0 in /usr/local/lib/python3.10/site-packages (from wandb) (2.31.0)\nRequirement already satisfied: six>=1.4.0 in /usr/local/lib/python3.10/site-packages (from docker-pycreds>=0.4.0->wandb) (1.16.0)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/site-packages (from GitPython!=3.1.29,>=1.0.0->wandb) (4.0.11)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (2023.11.17)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (2.1.0)\nRequirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/site-packages (from gitdb<5,>=4.0.1->GitPython!=3.1.29,>=1.0.0->wandb) (5.0.1)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"from keras.callbacks import TensorBoard\nimport wandb\nfrom wandb.keras import WandbCallback","metadata":{"execution":{"iopub.status.busy":"2024-04-20T13:27:10.126457Z","iopub.execute_input":"2024-04-20T13:27:10.126759Z","iopub.status.idle":"2024-04-20T13:27:10.471377Z","shell.execute_reply.started":"2024-04-20T13:27:10.126727Z","shell.execute_reply":"2024-04-20T13:27:10.470666Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# Set up TensorBoard callback\ntensorboard_callback = TensorBoard(log_dir='./logs', update_freq='epoch')","metadata":{"execution":{"iopub.status.busy":"2024-04-20T13:27:10.472343Z","iopub.execute_input":"2024-04-20T13:27:10.472591Z","iopub.status.idle":"2024-04-20T13:27:10.477179Z","shell.execute_reply.started":"2024-04-20T13:27:10.472565Z","shell.execute_reply":"2024-04-20T13:27:10.476563Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"!pip install --upgrade ipywidgets","metadata":{"execution":{"iopub.status.busy":"2024-04-20T13:27:10.477988Z","iopub.execute_input":"2024-04-20T13:27:10.478213Z","iopub.status.idle":"2024-04-20T13:27:14.019425Z","shell.execute_reply.started":"2024-04-20T13:27:10.478189Z","shell.execute_reply":"2024-04-20T13:27:14.018458Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Requirement already satisfied: ipywidgets in /usr/local/lib/python3.10/site-packages (8.1.2)\nRequirement already satisfied: ipython>=6.1.0 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (8.18.1)\nRequirement already satisfied: jupyterlab-widgets~=3.0.10 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (3.0.10)\nRequirement already satisfied: widgetsnbextension~=4.0.10 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (4.0.10)\nRequirement already satisfied: comm>=0.1.3 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (0.2.0)\nRequirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (5.14.0)\nRequirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.19.1)\nRequirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.1.6)\nRequirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (1.2.0)\nRequirement already satisfied: pygments>=2.4.0 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (2.17.2)\nRequirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (3.0.42)\nRequirement already satisfied: decorator in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (5.1.1)\nRequirement already satisfied: stack-data in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.6.3)\nRequirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (4.9.0)\nRequirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/site-packages (from jedi>=0.16->ipython>=6.1.0->ipywidgets) (0.8.3)\nRequirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/site-packages (from pexpect>4.3->ipython>=6.1.0->ipywidgets) (0.7.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.10/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=6.1.0->ipywidgets) (0.2.12)\nRequirement already satisfied: pure-eval in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (0.2.2)\nRequirement already satisfied: asttokens>=2.1.0 in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (2.4.1)\nRequirement already satisfied: executing>=1.2.0 in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (2.0.1)\nRequirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/site-packages (from asttokens>=2.1.0->stack-data->ipython>=6.1.0->ipywidgets) (1.16.0)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # Tries to detect TPU\n    print(\"Running on TPU:\", tpu.master())\nexcept ValueError:\n    print(\"Could not connect to TPU\")\n    tpu = None\n","metadata":{"execution":{"iopub.status.busy":"2024-04-20T13:27:14.022108Z","iopub.execute_input":"2024-04-20T13:27:14.022377Z","iopub.status.idle":"2024-04-20T13:27:14.027396Z","shell.execute_reply.started":"2024-04-20T13:27:14.022348Z","shell.execute_reply":"2024-04-20T13:27:14.026780Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Running on TPU: \n","output_type":"stream"}]},{"cell_type":"code","source":"if tpu:\n    try:\n        # Initialize the TPU system\n        print(\"Initializing TPU...\")\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"TPU initialized\")\n    except _:\n        print(\"Failed to initialize TPU\")\nelse:\n    print(\"Using default strategy (CPU/GPU)\")\n    strategy = tf.distribute.get_strategy()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-20T13:27:14.028210Z","iopub.execute_input":"2024-04-20T13:27:14.028421Z","iopub.status.idle":"2024-04-20T13:27:22.176186Z","shell.execute_reply.started":"2024-04-20T13:27:14.028399Z","shell.execute_reply":"2024-04-20T13:27:22.175355Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Initializing TPU...\nINFO:tensorflow:Deallocate tpu buffers before initializing tpu system.\nINFO:tensorflow:Initializing the TPU system: local\n","output_type":"stream"},{"name":"stderr","text":"2024-04-20 13:27:17.050772: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.050887: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.051026: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.051112: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.051184: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.051374: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.051449: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.051551: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.051647: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.051746: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.051956: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.052063: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.052140: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.052228: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.052317: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.052528: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.052604: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.052694: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.052790: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.052866: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.053087: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.053178: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.053258: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.053346: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.053432: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.053731: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.053819: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.053920: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.054064: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.054152: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.054385: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.054485: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.054628: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.054735: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.054831: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.055155: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.055247: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.055334: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.055432: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:17.055521: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:Finished initializing TPU system.\n","output_type":"stream"},{"name":"stderr","text":"WARNING:absl:`tf.distribute.experimental.TPUStrategy` is deprecated, please use the non-experimental symbol `tf.distribute.TPUStrategy` instead.\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:Found TPU system:\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:Found TPU system:\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Num TPU Cores: 8\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Num TPU Cores: 8\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Num TPU Workers: 1\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Num TPU Workers: 1\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Num TPU Cores Per Worker: 8\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:0, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:1, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:2, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:3, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:4, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:5, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:6, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU:7, TPU, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 0, 0)\n","output_type":"stream"},{"name":"stdout","text":"TPU initialized\n","output_type":"stream"}]},{"cell_type":"markdown","source":"if tpu:\n    try:\n        # Initialize the TPU system\n        print(\"Initializing TPU...\")\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"TPU initialized\")\n    except _:\n        print(\"Failed to initialize TPU\")\nelse:\n    print(\"Using default strategy (CPU/GPU)\")\n    strategy = tf.distribute.get_strategy()\n","metadata":{}},{"cell_type":"code","source":"!pip install imageio","metadata":{"execution":{"iopub.status.busy":"2024-04-20T13:27:22.177157Z","iopub.execute_input":"2024-04-20T13:27:22.177410Z","iopub.status.idle":"2024-04-20T13:27:25.607747Z","shell.execute_reply.started":"2024-04-20T13:27:22.177382Z","shell.execute_reply":"2024-04-20T13:27:25.606755Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Requirement already satisfied: imageio in /usr/local/lib/python3.10/site-packages (2.34.0)\nRequirement already satisfied: pillow>=8.3.2 in /usr/local/lib/python3.10/site-packages (from imageio) (10.1.0)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/site-packages (from imageio) (1.26.2)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install ipywidgets","metadata":{"execution":{"iopub.status.busy":"2024-04-20T13:27:25.609013Z","iopub.execute_input":"2024-04-20T13:27:25.609278Z","iopub.status.idle":"2024-04-20T13:27:29.070683Z","shell.execute_reply.started":"2024-04-20T13:27:25.609251Z","shell.execute_reply":"2024-04-20T13:27:29.069537Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Requirement already satisfied: ipywidgets in /usr/local/lib/python3.10/site-packages (8.1.2)\nRequirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (5.14.0)\nRequirement already satisfied: ipython>=6.1.0 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (8.18.1)\nRequirement already satisfied: widgetsnbextension~=4.0.10 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (4.0.10)\nRequirement already satisfied: comm>=0.1.3 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (0.2.0)\nRequirement already satisfied: jupyterlab-widgets~=3.0.10 in /usr/local/lib/python3.10/site-packages (from ipywidgets) (3.0.10)\nRequirement already satisfied: decorator in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (5.1.1)\nRequirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (1.2.0)\nRequirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (4.9.0)\nRequirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.19.1)\nRequirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.1.6)\nRequirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (3.0.42)\nRequirement already satisfied: stack-data in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (0.6.3)\nRequirement already satisfied: pygments>=2.4.0 in /usr/local/lib/python3.10/site-packages (from ipython>=6.1.0->ipywidgets) (2.17.2)\nRequirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/site-packages (from jedi>=0.16->ipython>=6.1.0->ipywidgets) (0.8.3)\nRequirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/site-packages (from pexpect>4.3->ipython>=6.1.0->ipywidgets) (0.7.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.10/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=6.1.0->ipywidgets) (0.2.12)\nRequirement already satisfied: asttokens>=2.1.0 in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (2.4.1)\nRequirement already satisfied: executing>=1.2.0 in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (2.0.1)\nRequirement already satisfied: pure-eval in /usr/local/lib/python3.10/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (0.2.2)\nRequirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/site-packages (from asttokens>=2.1.0->stack-data->ipython>=6.1.0->ipywidgets) (1.16.0)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras import layers\n\nimport io\nimport imageio\nfrom IPython.display import Image, display\nfrom ipywidgets import widgets, Layout, HBox","metadata":{"id":"iyIrFKLalUjV","execution":{"iopub.status.busy":"2024-04-20T13:27:29.071949Z","iopub.execute_input":"2024-04-20T13:27:29.072221Z","iopub.status.idle":"2024-04-20T13:27:29.446979Z","shell.execute_reply.started":"2024-04-20T13:27:29.072192Z","shell.execute_reply":"2024-04-20T13:27:29.446100Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"## Dataset Construction\n\nFor this example, we will be using the\n[Moving MNIST](http://www.cs.toronto.edu/~nitish/unsupervised_video/)\ndataset.\n\nWe will download the dataset and then construct and\npreprocess training and validation sets.\n\nFor next-frame prediction, our model will be using a previous frame,\nwhich we'll call `f_n`, to predict a new frame, called `f_(n + 1)`.\nTo allow the model to create these predictions, we'll need to process\nthe data such that we have \"shifted\" inputs and outputs, where the\ninput data is frame `x_n`, being used to predict frame `y_(n + 1)`.","metadata":{"id":"UiisescrL5pt"}},{"cell_type":"code","source":"# Downloading the Moving MNIST dataset\nfpath = keras.utils.get_file(\n    \"moving_mnist.npy\",\n    \"http://www.cs.toronto.edu/~nitish/unsupervised_video/mnist_test_seq.npy\",\n)\ndataset = np.load(fpath)\n\n# swapping the axes representing the number of frames and number of data samples\ndataset = np.swapaxes(dataset, 0, 1)\n# we pick out 1000 of the 10000 total exmaples and use those.\ndataset = dataset[:1000, ...]\n# adding a channel dimension since the images are grayscale.\ndataset = np.expand_dims(dataset, axis=-1)\n\n# splitting into train and validation sets using indexing to optimize memory.\nindexes = np.arange(dataset.shape[0])\nnp.random.shuffle(indexes)\ntrain_index = indexes[: int(0.9 * dataset.shape[0])]\nval_index = indexes[int(0.9 * dataset.shape[0]) :]\ntrain_dataset = dataset[train_index]\nval_dataset = dataset[val_index]\n\n# normalizing the data to the 0-1 range.\ntrain_dataset = train_dataset / 255\nval_dataset = val_dataset / 255\n\n# we define a helper function to shift the frames, where\n# 'x' is frame 0 to n - 1, and 'y' is frames 1 to n.\ndef create_shifted_frames(data):\n  x = data[:, 0 : data.shape[1] - 1, :, :]\n  y = data[:, 1 : data.shape[1], :, :]\n  return x,y\n\n# apply the processing function to the datasets.\nx_train, y_train = create_shifted_frames(train_dataset)\nx_val, y_val = create_shifted_frames(val_dataset)\n\n#inspect the dataset.\nprint(\"Training Dataset Shapes: \" + str(x_train.shape) + \", \" + str(y_train.shape))\nprint(\"Validation Dataset Shapes: \" + str(x_val.shape) + \", \" + str(y_val.shape))\n\n","metadata":{"id":"RwVV9tb6mLWu","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8b99ffb1-29e2-4770-a8be-77f4a986a927","execution":{"iopub.status.busy":"2024-04-20T13:27:29.448006Z","iopub.execute_input":"2024-04-20T13:27:29.448244Z","iopub.status.idle":"2024-04-20T13:27:29.937326Z","shell.execute_reply.started":"2024-04-20T13:27:29.448219Z","shell.execute_reply":"2024-04-20T13:27:29.936484Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Training Dataset Shapes: (900, 19, 64, 64, 1), (900, 19, 64, 64, 1)\nValidation Dataset Shapes: (100, 19, 64, 64, 1), (100, 19, 64, 64, 1)\n","output_type":"stream"}]},{"cell_type":"code","source":"import tensorflow as tf\n\ndef create_tf_dataset(x, y, batch_size=5, cache=False):\n    dataset = tf.data.Dataset.from_tensor_slices((x, y))\n    if cache:\n        dataset = dataset.cache()\n    dataset = dataset.shuffle(buffer_size=1024).batch(batch_size)\n    dataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\n    return dataset\n\n# Create TensorFlow datasets for training and validation\ntrain_tf_dataset = create_tf_dataset(x_train, y_train, batch_size=5, cache=True)\nval_tf_dataset = create_tf_dataset(x_val, y_val, batch_size=5, cache=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-20T13:27:29.938223Z","iopub.execute_input":"2024-04-20T13:27:29.938478Z","iopub.status.idle":"2024-04-20T13:27:31.418995Z","shell.execute_reply.started":"2024-04-20T13:27:29.938445Z","shell.execute_reply":"2024-04-20T13:27:31.418185Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"## Data Visualization\n\nOur data consists of sequences of frames, each of which\nare used to predict the upcoming frame. Let's take a look\nat some of these sequential frames.","metadata":{"id":"uX7kTs3ySN88"}},{"cell_type":"code","source":"# Contruct a figure on which we will visualize the images\nfig, axes = plt.subplots(4, 5, figsize=(10, 8))\n\n# Plot each of the sequential images for one random data example.\ndata_choice = np.random.choice(range(len(train_dataset)), size = 1)[0]\nfor idx, ax in enumerate(axes.flat):\n    ax.imshow(np.squeeze(train_dataset[data_choice][idx]), cmap=\"gray\")\n    ax.set_title(f\"Frame {idx + 1}\")\n    ax.axis(\"off\")\n\n# Print information and display the figure.\nprint(f\"Displaying frames for example {data_choice}.\")\nplt.show()\n","metadata":{"id":"Rs3LsDeUmT2Y","colab":{"base_uri":"https://localhost:8080/","height":692},"outputId":"b8a348f7-8ab8-435f-c8b4-d93555101e45","execution":{"iopub.status.busy":"2024-04-20T13:27:31.419914Z","iopub.execute_input":"2024-04-20T13:27:31.420163Z","iopub.status.idle":"2024-04-20T13:27:32.350681Z","shell.execute_reply.started":"2024-04-20T13:27:31.420137Z","shell.execute_reply":"2024-04-20T13:27:32.349969Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Displaying frames for example 147.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 20 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Model Construction\n\nTo build a Convolutional LSTM model, we will use the\n`ConvLSTM2D` layer, which will accept inputs of shape\n`(batch_size, num_frames, width, height, channels)`, and return\na prediction movie of the same shape.\n\n","metadata":{"id":"G7NQedSrUZca"}},{"cell_type":"markdown","source":"custom_loss that takes the true and predicted values for both frames and optical flow. The function calculates the frame loss using the Huber loss and the optical flow loss using the Huber loss as well. The total loss is the sum of the frame loss and the optical flow loss, weighted by a hyperparameter lambda","metadata":{}},{"cell_type":"code","source":"with strategy.scope():\n    # Constructing the input layer with no definite frame size.\n    inp = tf.keras.layers.Input(shape=(None, *x_train.shape[2:]))\n\n    # Constructing 5 `ConvLSTM2D` layers with batch normalization,\n    # followed by a `Conv3D` layer for the spatiotemporal outputs.\n    x = tf.keras.layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(5, 5),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(inp)\n    x = tf.keras.layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(3, 3),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = tf.keras.layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(3, 3),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = tf.keras.layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(1, 1),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = tf.keras.layers.ConvLSTM2D(\n        filters=64,\n        kernel_size=(1, 1),\n        padding=\"same\",\n        return_sequences=True,\n        activation=\"relu\",\n    )(x)\n    x = tf.keras.layers.Conv3D(\n        filters=1, kernel_size=(3, 3, 3), activation=\"sigmoid\", padding=\"same\"\n    )(x)\n\n    # Next, we will build the complete model and compile it.\n    model = tf.keras.models.Model(inp, x)\n    model.compile(\n        loss=tf.keras.losses.mean_squared_error,\n        optimizer=tf.keras.optimizers.Adam(),\n    )","metadata":{"id":"FIU6g8dfsj5x","execution":{"iopub.status.busy":"2024-04-20T13:27:32.351617Z","iopub.execute_input":"2024-04-20T13:27:32.351864Z","iopub.status.idle":"2024-04-20T13:27:36.041287Z","shell.execute_reply.started":"2024-04-20T13:27:32.351839Z","shell.execute_reply":"2024-04-20T13:27:36.040434Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stderr","text":"2024-04-20 13:27:32.512724: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:32.512832: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Model Training\n\nWith our model and data constructed, we can now train the model.","metadata":{"id":"FUNqsvz8Y-Lp"}},{"cell_type":"code","source":"with strategy.scope():\n    # Define some callbacks to improve training.\n    early_stopping = keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=20)\n    reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor=\"val_loss\", patience=5)\n\n    # Define modificable training hyperparameters\n    epochs = 1000\n    batch_size = 5\n\n    # Fitting the model to the training data.\n    model.fit(\n        train_tf_dataset,\n        batch_size=batch_size,\n        epochs=epochs,\n        validation_data=val_tf_dataset,\n        callbacks=[early_stopping, reduce_lr, tensorboard_callback],\n)","metadata":{"id":"CJr4T9l3O1wg","colab":{"base_uri":"https://localhost:8080/"},"outputId":"380bd180-30da-4080-a215-646bc601f7f4","execution":{"iopub.status.busy":"2024-04-20T13:27:36.042230Z","iopub.execute_input":"2024-04-20T13:27:36.042466Z","iopub.status.idle":"2024-04-20T14:36:24.570168Z","shell.execute_reply.started":"2024-04-20T13:27:36.042441Z","shell.execute_reply":"2024-04-20T14:36:24.568879Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stderr","text":"2024-04-20 13:27:38.503739: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:38.522754: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:38.540350: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:38.557915: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:38.575873: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:38.593132: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:38.610410: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/1000\n","output_type":"stream"},{"name":"stderr","text":"2024-04-20 13:27:48.472902: E tensorflow/core/grappler/optimizers/meta_optimizer.cc:961] model_pruner failed: INVALID_ARGUMENT: Graph does not contain terminal node Adam/AssignAddVariableOp.\n2024-04-20 13:27:49.320551: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:49.324094: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:49.324290: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:27:49.324925: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:28:34.108253: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:28:34.108373: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:28:34.108483: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:28:34.108605: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:28:34.108734: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:28:34.108831: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:28:34.108953: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n2024-04-20 13:28:34.109084: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":" 12/180 [=>............................] - ETA: 2:26 - loss: 0.2153","output_type":"stream"},{"name":"stderr","text":"2024-04-20 13:28:44.839974: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":" 18/180 [==>...........................] - ETA: 2:20 - loss: 0.1830","output_type":"stream"},{"name":"stderr","text":"2024-04-20 13:28:50.039918: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":" 36/180 [=====>........................] - ETA: 2:04 - loss: 0.1264","output_type":"stream"},{"name":"stderr","text":"2024-04-20 13:29:05.621103: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":"102/180 [================>.............] - ETA: 1:07 - loss: 0.0746","output_type":"stream"},{"name":"stderr","text":"2024-04-20 13:30:02.659403: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":"180/180 [==============================] - ETA: 0s - loss: 0.0608","output_type":"stream"},{"name":"stderr","text":"2024-04-20 13:31:12.496768: E tensorflow/core/grappler/optimizers/meta_optimizer.cc:961] model_pruner failed: INVALID_ARGUMENT: Graph does not contain terminal node AssignAddVariableOp.\n2024-04-20 13:31:43.041281: E ./tensorflow/compiler/xla/stream_executor/stream_executor_internal.h:124] SetPriority unimplemented for this stream.\n","output_type":"stream"},{"name":"stdout","text":"180/180 [==============================] - 246s 1s/step - loss: 0.0608 - val_loss: 0.0422 - lr: 0.0010\nEpoch 2/1000\n180/180 [==============================] - 160s 890ms/step - loss: 0.0427 - val_loss: 0.0421 - lr: 0.0010\nEpoch 3/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0424 - val_loss: 0.0403 - lr: 0.0010\nEpoch 4/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0376 - val_loss: 0.0339 - lr: 0.0010\nEpoch 5/1000\n180/180 [==============================] - 160s 890ms/step - loss: 0.0300 - val_loss: 0.0284 - lr: 0.0010\nEpoch 6/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0317 - val_loss: 0.0307 - lr: 0.0010\nEpoch 7/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0340 - val_loss: 0.0318 - lr: 0.0010\nEpoch 8/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0336 - val_loss: 0.0313 - lr: 0.0010\nEpoch 9/1000\n180/180 [==============================] - 160s 891ms/step - loss: 0.0356 - val_loss: 0.0392 - lr: 0.0010\nEpoch 10/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0381 - val_loss: 0.0368 - lr: 0.0010\nEpoch 11/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0369 - val_loss: 0.0361 - lr: 1.0000e-04\nEpoch 12/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0363 - val_loss: 0.0357 - lr: 1.0000e-04\nEpoch 13/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0361 - val_loss: 0.0352 - lr: 1.0000e-04\nEpoch 14/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0355 - val_loss: 0.0349 - lr: 1.0000e-04\nEpoch 15/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0352 - val_loss: 0.0348 - lr: 1.0000e-04\nEpoch 16/1000\n180/180 [==============================] - 160s 889ms/step - loss: 0.0350 - val_loss: 0.0345 - lr: 1.0000e-05\nEpoch 17/1000\n180/180 [==============================] - 160s 890ms/step - loss: 0.0350 - val_loss: 0.0345 - lr: 1.0000e-05\nEpoch 18/1000\n180/180 [==============================] - 160s 890ms/step - loss: 0.0350 - val_loss: 0.0345 - lr: 1.0000e-05\nEpoch 19/1000\n180/180 [==============================] - 161s 893ms/step - loss: 0.0349 - val_loss: 0.0345 - lr: 1.0000e-05\nEpoch 20/1000\n180/180 [==============================] - 160s 890ms/step - loss: 0.0349 - val_loss: 0.0345 - lr: 1.0000e-05\nEpoch 21/1000\n180/180 [==============================] - 160s 891ms/step - loss: 0.0349 - val_loss: 0.0345 - lr: 1.0000e-06\nEpoch 22/1000\n180/180 [==============================] - 161s 893ms/step - loss: 0.0349 - val_loss: 0.0344 - lr: 1.0000e-06\nEpoch 23/1000\n180/180 [==============================] - 161s 893ms/step - loss: 0.0349 - val_loss: 0.0344 - lr: 1.0000e-06\nEpoch 24/1000\n180/180 [==============================] - 160s 891ms/step - loss: 0.0349 - val_loss: 0.0344 - lr: 1.0000e-06\nEpoch 25/1000\n180/180 [==============================] - 160s 890ms/step - loss: 0.0349 - val_loss: 0.0344 - lr: 1.0000e-06\n","output_type":"stream"}]},{"cell_type":"code","source":"%load_ext tensorboard\n%tensorboard --logdir ./logs","metadata":{"execution":{"iopub.status.busy":"2024-04-20T14:36:24.571557Z","iopub.execute_input":"2024-04-20T14:36:24.571909Z","iopub.status.idle":"2024-04-20T14:36:35.612013Z","shell.execute_reply.started":"2024-04-20T14:36:24.571873Z","shell.execute_reply":"2024-04-20T14:36:35.610861Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n      <iframe id=\"tensorboard-frame-d75f5a5eeb0cbb86\" width=\"100%\" height=\"800\" frameborder=\"0\">\n      </iframe>\n      <script>\n        (function() {\n          const frame = document.getElementById(\"tensorboard-frame-d75f5a5eeb0cbb86\");\n          const url = new URL(\"/\", window.location);\n          const port = 6006;\n          if (port) {\n            url.port = port;\n          }\n          frame.src = url;\n        })();\n      </script>\n    "},"metadata":{}}]},{"cell_type":"markdown","source":"## Frame Prediction Visualizations\n\nWith our model now constructed and trained, we can generate\nsome example frame predictions based on a new video.\n\nWe'll pick a random example from the validation set and\nthen choose the first ten frames from them. From there, we can\nallow the model to predict 10 new frames, which we can compare\nto the ground truth frame predictions.","metadata":{"id":"A0JJPwxQZ4_m"}},{"cell_type":"code","source":"# Select a random example from the validation dataset.\nexample = val_dataset[np.random.choice(range(len(val_dataset)), size=1)[0]]\n\n# Pick the first/last ten frames from the example.\nframes = example[:10, ...]\noriginal_frames = example[10:, ...]\n\n# Predict a new set of 10 frames.\nfor _ in range(10):\n    # Extract the model's prediction and post-process it.\n    new_prediction = model.predict(np.expand_dims(frames, axis=0))\n    new_prediction = np.squeeze(new_prediction, axis=0)\n    predicted_frame = np.expand_dims(new_prediction[-1, ...], axis=0)\n\n    # Extend the set of prediction frames.\n    frames = np.concatenate((frames, predicted_frame), axis=0)\n\n# Construct a figure for the original and new frames.\nfig, axes = plt.subplots(2, 10, figsize=(20, 4))\n\n# Plot the original frames.\nfor idx, ax in enumerate(axes[0]):\n    ax.imshow(np.squeeze(original_frames[idx]), cmap=\"gray\")\n    ax.set_title(f\"Frame {idx + 11}\")\n    ax.axis(\"off\")\n\n# Plot the new frames.\nnew_frames = frames[10:, ...]\nfor idx, ax in enumerate(axes[1]):\n    ax.imshow(np.squeeze(new_frames[idx]), cmap=\"gray\")\n    ax.set_title(f\"Frame {idx + 11}\")\n    ax.axis(\"off\")\n\n# Display the figure.\nplt.show()\n","metadata":{"id":"l_wCQqVMO3jf","execution":{"iopub.status.busy":"2024-04-20T14:36:35.613422Z","iopub.execute_input":"2024-04-20T14:36:35.613836Z","iopub.status.idle":"2024-04-20T14:39:43.410671Z","shell.execute_reply.started":"2024-04-20T14:36:35.613781Z","shell.execute_reply":"2024-04-20T14:39:43.409736Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stderr","text":"2024-04-20 14:36:37.260016: E tensorflow/core/grappler/optimizers/meta_optimizer.cc:961] model_pruner failed: INVALID_ARGUMENT: Graph does not contain terminal node AssignAddVariableOp.\n","output_type":"stream"},{"name":"stdout","text":"1/1 [==============================] - 28s 28s/step\n1/1 [==============================] - 16s 16s/step\n1/1 [==============================] - 15s 15s/step\n1/1 [==============================] - 16s 16s/step\n1/1 [==============================] - 16s 16s/step\n1/1 [==============================] - 20s 20s/step\n1/1 [==============================] - 17s 17s/step\n1/1 [==============================] - 19s 19s/step\n1/1 [==============================] - 20s 20s/step\n1/1 [==============================] - 19s 19s/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x400 with 20 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Predicted Videos\n\nFinally, we'll pick a few examples from the validation set\nand construct some GIFs with them to see the model's\npredicted videos.\n\nWe can use the trained model hosted on [Hugging Face Hub](https://huggingface.co/keras-io/conv-lstm)\nand try the demo on [Hugging Face Spaces](https://huggingface.co/spaces/keras-io/conv-lstm)","metadata":{"id":"0aFxUhK7gZHv"}},{"cell_type":"code","source":"# Selecting a few random examples from the dataset.\nexamples = val_dataset[np.random.choice(range(len(val_dataset)), size=5)]\n\n# Iterate over the examples and predict the frames.\npredicted_videos = []\nfor example in examples:\n  # Pick the first/last ten frames from the example.\n  frames = example[10:, ...]\n  original_frames = example[10:, ...]\n  new_predictions = np.zeros(shape=(10, *frames[0].shape))\n\n  # Predict a new set of 10 frames.\n  for i in range(10):\n      # Extract the model's prediction and post-process it.\n      frames = example[: 10 + i + 1, ...]\n      new_prediction = model.predict(np.expand_dims(frames, axis=0))\n      new_prediction = np.squeeze(new_prediction, axis=0)\n      predicted_frame = np.expand_dims(new_prediction[-1, ...], axis=0)\n\n      # Extending the set of prediction frames.\n      new_predictions[i] = predicted_frame\n\n  # Creating and saving GIFs for each of the ground truth/prediction images.\n  for frame_set in [original_frames, new_predictions]:\n      #Construct a GIF from the selected video frames.\n      current_frames = np.squeeze(frame_set)\n      current_frames = current_frames[..., np.newaxis] * np.ones(3)\n      current_frames = (current_frames * 255).astype(np.uint8)\n      current_frames = list(current_frames)\n\n      # Construct a GIF from the frames.\n      with io.BytesIO() as gif:\n          imageio.mimsave(gif, current_frames, \"GIF\", duration=200)\n          predicted_videos.append(gif.getvalue())\n\n# Display the videos.\nprint(\" Truth\\tPrediction\")\nfor i in range(0, len(predicted_videos), 2):\n  # Construct and display an 'HBox'  with the ground truth and prediction.\n  box = HBox(\n      [\n          widgets.Image(value=predicted_videos[i]),\n          widgets.Image(value=predicted_videos[i + 1]),\n      ]\n  )\n  display(box)\n\n","metadata":{"id":"DZTgO3koO8JA","execution":{"iopub.status.busy":"2024-04-20T14:39:43.413923Z","iopub.execute_input":"2024-04-20T14:39:43.414225Z","iopub.status.idle":"2024-04-20T14:40:34.220303Z","shell.execute_reply.started":"2024-04-20T14:39:43.414196Z","shell.execute_reply":"2024-04-20T14:40:34.219389Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"1/1 [==============================] - 0s 488ms/step\n1/1 [==============================] - 0s 477ms/step\n1/1 [==============================] - 0s 475ms/step\n1/1 [==============================] - 0s 474ms/step\n1/1 [==============================] - 0s 489ms/step\n1/1 [==============================] - 1s 537ms/step\n1/1 [==============================] - 1s 586ms/step\n1/1 [==============================] - 1s 526ms/step\n1/1 [==============================] - 1s 537ms/step\n1/1 [==============================] - 21s 21s/step\n1/1 [==============================] - 0s 468ms/step\n1/1 [==============================] - 1s 513ms/step\n1/1 [==============================] - 0s 481ms/step\n1/1 [==============================] - 0s 498ms/step\n1/1 [==============================] - 1s 589ms/step\n1/1 [==============================] - 1s 507ms/step\n1/1 [==============================] - 1s 545ms/step\n1/1 [==============================] - 1s 527ms/step\n1/1 [==============================] - 1s 1s/step\n1/1 [==============================] - 1s 551ms/step\n1/1 [==============================] - 0s 464ms/step\n1/1 [==============================] - 0s 473ms/step\n1/1 [==============================] - 1s 507ms/step\n1/1 [==============================] - 1s 510ms/step\n1/1 [==============================] - 1s 502ms/step\n1/1 [==============================] - 1s 537ms/step\n1/1 [==============================] - 1s 524ms/step\n1/1 [==============================] - 1s 508ms/step\n1/1 [==============================] - 1s 527ms/step\n1/1 [==============================] - 1s 519ms/step\n1/1 [==============================] - 0s 451ms/step\n1/1 [==============================] - 0s 458ms/step\n1/1 [==============================] - 0s 472ms/step\n1/1 [==============================] - 1s 515ms/step\n1/1 [==============================] - 1s 564ms/step\n1/1 [==============================] - 0s 498ms/step\n1/1 [==============================] - 1s 537ms/step\n1/1 [==============================] - 1s 529ms/step\n1/1 [==============================] - 1s 521ms/step\n1/1 [==============================] - 1s 523ms/step\n1/1 [==============================] - 0s 454ms/step\n1/1 [==============================] - 0s 462ms/step\n1/1 [==============================] - 0s 496ms/step\n1/1 [==============================] - 0s 498ms/step\n1/1 [==============================] - 0s 494ms/step\n1/1 [==============================] - 1s 502ms/step\n1/1 [==============================] - 0s 496ms/step\n1/1 [==============================] - 1s 557ms/step\n1/1 [==============================] - 1s 527ms/step\n1/1 [==============================] - 1s 534ms/step\n Truth\tPrediction\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"HBox(children=(Image(value=b'GIF89a@\\x00@\\x00\\x86\\x00\\x00\\xff\\xff\\xff\\xfe\\xfe\\xfe\\xfd\\xfd\\xfd\\xfc\\xfc\\xfc\\xfb\\…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fa898dc1884b40589626067c3441c15e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"HBox(children=(Image(value=b'GIF89a@\\x00@\\x00\\x86\\x00\\x00\\xff\\xff\\xff\\xfe\\xfe\\xfe\\xfd\\xfd\\xfd\\xfc\\xfc\\xfc\\xfa\\…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"48f7b955dee843c5a24acd4d2e01ba60"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"HBox(children=(Image(value=b'GIF89a@\\x00@\\x00\\x85\\x00\\x00\\xff\\xff\\xff\\xfe\\xfe\\xfe\\xfa\\xfa\\xfa\\xf6\\xf6\\xf6\\xf5\\…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a1f3ccb3b3c643cdad141ed08319a425"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"HBox(children=(Image(value=b'GIF89a@\\x00@\\x00\\x86\\x00\\x00\\xff\\xff\\xff\\xfe\\xfe\\xfe\\xfd\\xfd\\xfd\\xfc\\xfc\\xfc\\xfb\\…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1f088662d7ac4acdb963395cfe955374"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"HBox(children=(Image(value=b'GIF89a@\\x00@\\x00\\x86\\x00\\x00\\xff\\xff\\xff\\xfe\\xfe\\xfe\\xfd\\xfd\\xfd\\xfc\\xfc\\xfc\\xfb\\…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e278458f02c84bcba1decd6825b4e58b"}},"metadata":{}}]},{"cell_type":"code","source":"model.save('/kaggle/working/')\n","metadata":{"id":"zpMi64tD43Dz","execution":{"iopub.status.busy":"2024-04-20T14:40:34.221299Z","iopub.execute_input":"2024-04-20T14:40:34.221560Z","iopub.status.idle":"2024-04-20T14:40:42.549214Z","shell.execute_reply.started":"2024-04-20T14:40:34.221532Z","shell.execute_reply":"2024-04-20T14:40:42.547989Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"INFO:tensorflow:Assets written to: /kaggle/working/assets\n","output_type":"stream"},{"name":"stderr","text":"INFO:tensorflow:Assets written to: /kaggle/working/assets\n","output_type":"stream"}]},{"cell_type":"code","source":"from transformers import TFAutoModel\n\n# Load your TensorFlow model\nmodel = TFAutoModel.from_pretrained(\"/kaggle/working/\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-20T14:40:42.559190Z","iopub.execute_input":"2024-04-20T14:40:42.559486Z","iopub.status.idle":"2024-04-20T14:41:06.351853Z","shell.execute_reply.started":"2024-04-20T14:40:42.559456Z","shell.execute_reply":"2024-04-20T14:41:06.348686Z"},"trusted":true},"execution_count":20,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","Cell \u001b[0;32mIn[20], line 4\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtransformers\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m TFAutoModel\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m# Load your TensorFlow model\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[43mTFAutoModel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfrom_pretrained\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m/kaggle/working/\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/transformers/models/auto/auto_factory.py:526\u001b[0m, in \u001b[0;36m_BaseAutoModelClass.from_pretrained\u001b[0;34m(cls, pretrained_model_name_or_path, *model_args, **kwargs)\u001b[0m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m kwargs\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mquantization_config\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    524\u001b[0m     _ \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mquantization_config\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 526\u001b[0m config, kwargs \u001b[38;5;241m=\u001b[39m \u001b[43mAutoConfig\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfrom_pretrained\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    527\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpretrained_model_name_or_path\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    528\u001b[0m \u001b[43m    \u001b[49m\u001b[43mreturn_unused_kwargs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    529\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtrust_remote_code\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrust_remote_code\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    530\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcode_revision\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcode_revision\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    531\u001b[0m \u001b[43m    \u001b[49m\u001b[43m_commit_hash\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcommit_hash\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    532\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mhub_kwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    533\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    534\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    536\u001b[0m \u001b[38;5;66;03m# if torch_dtype=auto was passed here, ensure to pass it on\u001b[39;00m\n\u001b[1;32m    537\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m kwargs_orig\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtorch_dtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mauto\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/transformers/models/auto/configuration_auto.py:1082\u001b[0m, in \u001b[0;36mAutoConfig.from_pretrained\u001b[0;34m(cls, pretrained_model_name_or_path, **kwargs)\u001b[0m\n\u001b[1;32m   1079\u001b[0m trust_remote_code \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrust_remote_code\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[1;32m   1080\u001b[0m code_revision \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcode_revision\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[0;32m-> 1082\u001b[0m config_dict, unused_kwargs \u001b[38;5;241m=\u001b[39m \u001b[43mPretrainedConfig\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_config_dict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpretrained_model_name_or_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1083\u001b[0m has_remote_code \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mauto_map\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m config_dict \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAutoConfig\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m config_dict[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mauto_map\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m   1084\u001b[0m has_local_code \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmodel_type\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m config_dict \u001b[38;5;129;01mand\u001b[39;00m config_dict[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmodel_type\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;129;01min\u001b[39;00m CONFIG_MAPPING\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/transformers/configuration_utils.py:644\u001b[0m, in \u001b[0;36mPretrainedConfig.get_config_dict\u001b[0;34m(cls, pretrained_model_name_or_path, **kwargs)\u001b[0m\n\u001b[1;32m    642\u001b[0m original_kwargs \u001b[38;5;241m=\u001b[39m copy\u001b[38;5;241m.\u001b[39mdeepcopy(kwargs)\n\u001b[1;32m    643\u001b[0m \u001b[38;5;66;03m# Get config dict associated with the base config file\u001b[39;00m\n\u001b[0;32m--> 644\u001b[0m config_dict, kwargs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mcls\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_config_dict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpretrained_model_name_or_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    645\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_commit_hash\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m config_dict:\n\u001b[1;32m    646\u001b[0m     original_kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_commit_hash\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m config_dict[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_commit_hash\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/transformers/configuration_utils.py:699\u001b[0m, in \u001b[0;36mPretrainedConfig._get_config_dict\u001b[0;34m(cls, pretrained_model_name_or_path, **kwargs)\u001b[0m\n\u001b[1;32m    695\u001b[0m configuration_file \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_configuration_file\u001b[39m\u001b[38;5;124m\"\u001b[39m, CONFIG_NAME)\n\u001b[1;32m    697\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    698\u001b[0m     \u001b[38;5;66;03m# Load from local folder or from cache or download from model Hub and cache\u001b[39;00m\n\u001b[0;32m--> 699\u001b[0m     resolved_config_file \u001b[38;5;241m=\u001b[39m \u001b[43mcached_file\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    700\u001b[0m \u001b[43m        \u001b[49m\u001b[43mpretrained_model_name_or_path\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    701\u001b[0m \u001b[43m        \u001b[49m\u001b[43mconfiguration_file\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    702\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcache_dir\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcache_dir\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    703\u001b[0m \u001b[43m        \u001b[49m\u001b[43mforce_download\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_download\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    704\u001b[0m \u001b[43m        \u001b[49m\u001b[43mproxies\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproxies\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    705\u001b[0m \u001b[43m        \u001b[49m\u001b[43mresume_download\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mresume_download\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    706\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlocal_files_only\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlocal_files_only\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    707\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtoken\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtoken\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    708\u001b[0m \u001b[43m        \u001b[49m\u001b[43muser_agent\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43muser_agent\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    709\u001b[0m \u001b[43m        \u001b[49m\u001b[43mrevision\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrevision\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    710\u001b[0m \u001b[43m        \u001b[49m\u001b[43msubfolder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msubfolder\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    711\u001b[0m \u001b[43m        \u001b[49m\u001b[43m_commit_hash\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcommit_hash\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    712\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    713\u001b[0m     commit_hash \u001b[38;5;241m=\u001b[39m extract_commit_hash(resolved_config_file, commit_hash)\n\u001b[1;32m    714\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mEnvironmentError\u001b[39;00m:\n\u001b[1;32m    715\u001b[0m     \u001b[38;5;66;03m# Raise any environment error raise by `cached_file`. It will have a helpful error message adapted to\u001b[39;00m\n\u001b[1;32m    716\u001b[0m     \u001b[38;5;66;03m# the original exception.\u001b[39;00m\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/transformers/utils/hub.py:360\u001b[0m, in \u001b[0;36mcached_file\u001b[0;34m(path_or_repo_id, filename, cache_dir, force_download, resume_download, proxies, token, revision, local_files_only, subfolder, repo_type, user_agent, _raise_exceptions_for_missing_entries, _raise_exceptions_for_connection_errors, _commit_hash, **deprecated_kwargs)\u001b[0m\n\u001b[1;32m    358\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39misfile(resolved_file):\n\u001b[1;32m    359\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m _raise_exceptions_for_missing_entries:\n\u001b[0;32m--> 360\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mEnvironmentError\u001b[39;00m(\n\u001b[1;32m    361\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpath_or_repo_id\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not appear to have a file named \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfull_filename\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m. Checkout \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    362\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mhttps://huggingface.co/\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpath_or_repo_id\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m/\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mrevision\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m for available files.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    363\u001b[0m         )\n\u001b[1;32m    364\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    365\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n","\u001b[0;31mOSError\u001b[0m: /kaggle/working/ does not appear to have a file named config.json. Checkout 'https://huggingface.co//kaggle/working//None' for available files."],"ename":"OSError","evalue":"/kaggle/working/ does not appear to have a file named config.json. Checkout 'https://huggingface.co//kaggle/working//None' for available files.","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}